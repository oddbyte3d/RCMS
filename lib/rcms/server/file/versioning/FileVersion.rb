 # @author  staylor
require "yaml"
require_relative "./FileVersionInfo"


 class FileVersion

   attr_accessor :editable, :versionUser, :versionedFile, :versionDescription, :versionName,
                :versionNumber, :currentVersion, :thisVersion, :versionDate, :VTYPE, :TYPE_DELETED,
                :TYPE_RENAMED, :TYPE_ROLLBACK, :TYPE_MODIFIED
    #  index.xml.ADMIN_root__TIME_13-01-2006_10-44-49__MODIFIED
    #    index.xml.ADMIN_root__TIME_13-01-2006_10-44-49__ROLLBACK
    #    index.xml.ADMIN_root__TIME_13-01-2006_10-44-49__RENAMED-jackass.xml
    #    index.xml.ADMIN_root__TIME_13-01-2006_10-44-49__DELETED

     # Creates a new instance of FileVersion
    def initialize(vFile, uName, sess, tVersion, cVersion)
        @versionedFile = vFile
        @userName = uName
        @session = sess
        @thisVersion = tVersion
        @currentVersion = cVersion
        @FS = File::SEPARATOR

        @TYPE_MODIFIED = 0
        @TYPE_DELETED = 1
        @TYPE_RENAMED = 2
        @TYPE_ROLLBACK = 3


        #puts "FileVersion : vFile:#{vFile} uName:#{uName} sess:#{sess} tVersion:#{tVersion} cVersion:#{cVersion}"
        #versionProps.load(new FileInputStream(thisVersion));
        @versionProperties = YAML.load_file(tVersion)

        vpath = File.absolute_path(@thisVersion)
        path = File.absolute_path("#{vpath[0,vpath.rindex(@FS)+1]}files#{@FS}")
        @thisVersion = "#{path}#{@versionProperties["file"]}"

        @versionName = @versionProperties["versionName"]

        if @versionProperties["editable"] != nil
            @editable = (@versionProperties["editable"].downcase == "true" )
        else
            @editable = false
        end

        @versionDescription = @versionProperties["versionDescription"]

        @versionNumber = @versionProperties["version"].to_i

        @thisVName = File.basename(@thisVersion)
        @type = @versionProperties["type"]
        if @type == "MODIFIED"
            @VTYPE = @TYPE_MODIFIED
        elsif @type == "DELETED"
            @VTYPE = @TYPE_DELETED
        elsif @type == "RENAMED"

            @VTYPE = @TYPE_RENAMED;
            rename = @versionProperties["renamedto"]
            dir = "#{@currentVersion[0..@currentVersion.rindex(@FS)+1]}#{rename}"
            #puts "Renamed to: #{dir}"
            @renamedTo = dir
        elsif @type.start_with?("ROLLBACK")
            @VTYPE = @TYPE_ROLLBACK;
        end
        @versionUser = @versionProperties["user"]
        @versionDate = Date.jd( @versionProperties["date"].to_i)

        #puts "FileVersion info :#{@versionProperties}"
    end

    def finaliseVersion

        @versionProperties["editable"] = "false"
        File.write(@thisVersion, @versionProperties.to_yaml)
    end



     # Returns whether or not this is a auto generated version.
     # @return

    def isAutoGeneratedVersion

        if @versionName == nil
            @versionName = "auto-generated-version"
        end
        return @versionName == "auto-generated-version"
    end


    def after(compare)
      Date.jd( @versionProperties["date"].to_i) > Date.jd(compare.versionDate)
    end

    def before(compare)
      Date.jd( @versionProperties["date"].to_i) < Date.jd(compare.versionDate)
    end

    def getRenamedToFile

        if (@VTYPE == @TYPE_RENAMED && File.exist?(@renamedTo))
            return @renamedTo
        else
            return nil
        end
    end



    def getVersionTypeAsString

        case @VTYPE
        when @TYPE_DELETED
          return "Deleted"
        when @TYPE_MODIFIED
          return "Modified"
        when @TYPE_RENAMED
          return "Renamed"
        when @TYPE_ROLLBACK
          return "Rollback"
        end
        return "Unknown type"
    end

    #Retuns a simplified version with just data
    def getSerialisedVersion
        return FileVersionInfo.new(@userName, @VTYPE, @when)
    end

end
